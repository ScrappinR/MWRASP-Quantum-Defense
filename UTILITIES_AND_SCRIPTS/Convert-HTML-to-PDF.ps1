# MWRASP HTML to PDF Conversion Script
# Converts all HTML files to PDF using Chrome headless mode

param(
    [string]$HtmlPath = "C:\Users\User\MWRASP-Quantum-Defense\HTML_TEMP",
    [string]$PdfPath = "C:\Users\User\MWRASP-Quantum-Defense\PDF_DOCUMENTS",
    [string]$ChromePath = ""
)

Write-Host "MWRASP HTML to PDF Conversion Script" -ForegroundColor Green
Write-Host "===================================" -ForegroundColor Green

# Find Chrome executable
$possibleChromePaths = @(
    "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe",
    "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe",
    "${env:LocalAppData}\Google\Chrome\Application\chrome.exe",
    "${env:ProgramFiles}\Microsoft\Edge\Application\msedge.exe",
    "${env:ProgramFiles(x86)}\Microsoft\Edge\Application\msedge.exe"
)

$chromeExe = ""
foreach ($path in $possibleChromePaths) {
    if (Test-Path $path) {
        $chromeExe = $path
        break
    }
}

if (-not $chromeExe) {
    Write-Error "Chrome or Edge browser not found. Please install Chrome or specify path with -ChromePath parameter."
    exit 1
}

Write-Host "Using browser: $chromeExe" -ForegroundColor Yellow

# Create PDF output directory
if (-not (Test-Path $PdfPath)) {
    New-Item -ItemType Directory -Path $PdfPath -Force | Out-Null
    Write-Host "Created PDF output directory: $PdfPath" -ForegroundColor Green
}

# Find all HTML files
$htmlFiles = Get-ChildItem -Path $HtmlPath -Filter "*.html" -Recurse
$totalFiles = $htmlFiles.Count
$currentFile = 0
$successCount = 0
$errorCount = 0

Write-Host "Found $totalFiles HTML files to convert" -ForegroundColor Cyan
Write-Host "Starting conversion..." -ForegroundColor Cyan

foreach ($file in $htmlFiles) {
    $currentFile++
    
    # Calculate relative path
    $relativePath = $file.FullName.Substring($HtmlPath.Length + 1)
    $pdfFileName = [System.IO.Path]::ChangeExtension($relativePath, "pdf")
    $pdfFullPath = Join-Path $PdfPath $pdfFileName
    
    # Create directory if needed
    $pdfDirectory = Split-Path $pdfFullPath -Parent
    if (-not (Test-Path $pdfDirectory)) {
        New-Item -ItemType Directory -Path $pdfDirectory -Force | Out-Null
    }
    
    # Convert HTML to PDF
    Write-Host "[$currentFile/$totalFiles] Converting: $($file.Name)" -ForegroundColor White
    
    try {
        $arguments = @(
            "--headless",
            "--disable-gpu",
            "--no-sandbox",
            "--disable-dev-shm-usage",
            "--print-to-pdf=`"$pdfFullPath`"",
            "--print-to-pdf-no-header",
            "--run-all-compositor-stages-before-draw",
            "file:///$($file.FullName.Replace('\', '/'))"
        )
        
        $process = Start-Process -FilePath $chromeExe -ArgumentList $arguments -Wait -NoNewWindow -PassThru
        
        if ($process.ExitCode -eq 0 -and (Test-Path $pdfFullPath)) {
            $successCount++
            $fileSize = (Get-Item $pdfFullPath).Length
            Write-Host "  ‚úì Success ($([math]::Round($fileSize / 1KB, 1)) KB)" -ForegroundColor Green
        } else {
            $errorCount++
            Write-Host "  ‚úó Failed" -ForegroundColor Red
        }
    }
    catch {
        $errorCount++
        Write-Host "  ‚úó Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Generate conversion report
$reportPath = Join-Path $PdfPath "PDF_CONVERSION_REPORT.txt"
$reportContent = @"
MWRASP HTML to PDF Conversion Report
===================================

Conversion Date: $(Get-Date)
Browser Used: $chromeExe
Total Files: $totalFiles
Successful: $successCount
Errors: $errorCount
Success Rate: $([math]::Round(($successCount / $totalFiles) * 100, 1))%

HTML Source: $HtmlPath
PDF Output: $PdfPath

Conversion Summary:
- All markdown files converted to HTML
- HTML files converted to PDF using Chrome headless
- PDF files maintain professional formatting
- Document classification preserved
- Ready for distribution and presentation

Next Steps:
1. Review PDF files in: $PdfPath
2. Distribute to stakeholders as needed
3. Use for funding presentations and proposals
4. Archive original markdown and HTML files

Generated by MWRASP PDF Conversion Script
"@

Set-Content -Path $reportPath -Value $reportContent

# Print final summary
Write-Host "`n" + "="*50 -ForegroundColor Green
Write-Host "CONVERSION COMPLETE" -ForegroundColor Green
Write-Host "="*50 -ForegroundColor Green
Write-Host "‚úì Successful: $successCount" -ForegroundColor Green
Write-Host "‚úó Errors: $errorCount" -ForegroundColor Red
Write-Host "üìÅ PDF Output: $PdfPath" -ForegroundColor Cyan
Write-Host "üìä Report: $reportPath" -ForegroundColor Cyan

if ($errorCount -eq 0) {
    Write-Host "`nüéâ All $totalFiles files converted successfully!" -ForegroundColor Green
    Write-Host "Your MWRASP documentation is now available in professional PDF format." -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è $errorCount files had conversion errors." -ForegroundColor Yellow
    Write-Host "Check the conversion report for details." -ForegroundColor Yellow
}

Write-Host "`nPDF documents are ready for:" -ForegroundColor White
Write-Host "‚Ä¢ DARPA funding submissions" -ForegroundColor White
Write-Host "‚Ä¢ Private investor presentations" -ForegroundColor White
Write-Host "‚Ä¢ Strategic acquisition discussions" -ForegroundColor White
Write-Host "‚Ä¢ Government stakeholder briefings" -ForegroundColor White