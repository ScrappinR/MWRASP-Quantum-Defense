# istio/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: homomorphic-swarm
  namespace: homomorphic-swarm
spec:
  hosts:
  - swarm.example.com
  gateways:
  - swarm-gateway
  http:
  - match:
    - uri:
        prefix: /api/v1/compute
    route:
    - destination:
        host: homomorphic-swarm-queen
        port:
          number: 8000
      weight: 100
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: gateway-error,connect-failure,refused-stream
  - match:
    - uri:
        prefix: /ws
    route:
    - destination:
        host: homomorphic-swarm-queen
        port:
          number: 8000
    websocketUpgrade: true

---
# istio/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: homomorphic-swarm-queen
  namespace: homomorphic-swarm
spec:
  host: homomorphic-swarm-queen
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 100
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
    loadBalancer:
      consistentHash:
        httpCookie:
          name: "swarm-session"
          ttl: 3600s
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# istio/gateway.yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: swarm-gateway
  namespace: homomorphic-swarm
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: swarm-tls-cert
    hosts:
    - swarm.example.com
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - swarm.example.com
    tls:
      httpsRedirect: true

---
# istio/service-entry.yaml
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-seal-service
  namespace: homomorphic-swarm
spec:
  hosts:
  - seal.microsoft.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
# istio/peer-authentication.yaml
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: swarm-mtls
  namespace: homomorphic-swarm
spec:
  mtls:
    mode: STRICT

---
# istio/authorization-policy.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: swarm-authz
  namespace: homomorphic-swarm
spec:
  selector:
    matchLabels:
      app: homomorphic-swarm
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/homomorphic-swarm/sa/swarm-queen"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/api/v1/compute"]
  - from:
    - source:
        namespaces: ["prometheus"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]

---
# nginx/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: homomorphic-swarm
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    worker_rlimit_nofile 65535;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        keepalive_requests 100;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript application/json application/javascript;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
        limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
        
        # Upstream configuration
        upstream swarm_backend {
            least_conn;
            
            server homomorphic-swarm-queen-0.homomorphic-swarm-queen:8000 weight=3;
            server homomorphic-swarm-queen-1.homomorphic-swarm-queen:8000 weight=3;
            server homomorphic-swarm-queen-2.homomorphic-swarm-queen:8000 weight=3;
            
            keepalive 32;
            keepalive_timeout 60s;
        }
        
        # Health check upstream
        upstream health_check {
            server homomorphic-swarm-queen:8000;
            keepalive 16;
        }
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        server {
            listen 80;
            server_name swarm.example.com;
            return 301 https://$server_name$request_uri;
        }
        
        server {
            listen 443 ssl http2;
            server_name swarm.example.com;
            
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            
            # API endpoints
            location /api/v1/ {
                limit_req zone=api_limit burst=20 nodelay;
                limit_conn conn_limit 10;
                
                proxy_pass http://swarm_backend;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                # Buffering
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
                
                # Cache
                proxy_cache_methods GET HEAD;
                proxy_cache_valid 200 1m;
                proxy_cache_bypass $http_cache_control;
                proxy_no_cache $http_cache_control;
            }
            
            # WebSocket support
            location /ws/ {
                proxy_pass http://swarm_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_read_timeout 3600s;
                proxy_send_timeout 3600s;
            }
            
            # Health check
            location /health {
                access_log off;
                proxy_pass http://health_check;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
            }
            
            # Metrics (internal only)
            location /metrics {
                allow 10.0.0.0/8;
                deny all;
                proxy_pass http://swarm_backend;
            }
        }
    }

---
# haproxy/haproxy-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: homomorphic-swarm
data:
  haproxy.cfg: |
    global
        log stdout format raw local0
        maxconn 4096
        tune.ssl.default-dh-param 2048
        ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-options ssl-min-ver TLSv1.2
        
    defaults
        log global
        mode http
        option httplog
        option dontlognull
        timeout connect 5000ms
        timeout client 30000ms
        timeout server 30000ms
        option redispatch
        retry-on all-retryable-errors
        
    frontend swarm_frontend
        bind *:80
        bind *:443 ssl crt /etc/ssl/certs/swarm.pem
        redirect scheme https if !{ ssl_fc }
        
        # Rate limiting
        stick-table type ip size 100k expire 30s store http_req_rate(10s)
        http-request track-sc0 src
        http-request deny if { sc_http_req_rate(0) gt 100 }
        
        # ACLs
        acl is_websocket hdr(Upgrade) -i WebSocket
        acl is_api path_beg /api/v1/
        acl is_health path /health
        
        # Use backend
        use_backend swarm_websocket if is_websocket
        use_backend swarm_api if is_api
        use_backend health_check if is_health
        default_backend swarm_api
        
    backend swarm_api
        balance leastconn
        option httpchk GET /health
        
        # Stick sessions
        cookie SERVERID insert indirect nocache
        
        # Circuit breaker
        option redispatch
        retry-on all-retryable-errors
        retries 3
        
        # Servers with health checks
        server queen-0 homomorphic-swarm-queen-0:8000 check inter 2s fall 3 rise 2 cookie queen-0
        server queen-1 homomorphic-swarm-queen-1:8000 check inter 2s fall 3 rise 2 cookie queen-1
        server queen-2 homomorphic-swarm-queen-2:8000 check inter 2s fall 3 rise 2 cookie queen-2
        
    backend swarm_websocket
        balance source
        option http-server-close
        option forwardfor
        
        server queen-0 homomorphic-swarm-queen-0:8000 check
        server queen-1 homomorphic-swarm-queen-1:8000 check
        server queen-2 homomorphic-swarm-queen-2:8000 check
        
    backend health_check
        server health homomorphic-swarm-queen:8000/health

---
# envoy/envoy-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: homomorphic-swarm
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              http_filters:
              - name: envoy.filters.http.local_ratelimit
                typed_config:
                  "@type": type.googleapis.com/udpa.type.v1.TypedStruct
                  type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                  value:
                    stat_prefix: http_local_rate_limiter
                    token_bucket:
                      max_tokens: 100
                      tokens_per_fill: 100
                      fill_interval: 1s
                    filter_enabled:
                      runtime_key: local_rate_limit_enabled
                      default_value:
                        numerator: 100
                        denominator: HUNDRED
                    filter_enforced:
                      runtime_key: local_rate_limit_enforced
                      default_value:
                        numerator: 100
                        denominator: HUNDRED
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/api/v1/"
                    route:
                      cluster: swarm_cluster
                      timeout: 30s
                      retry_policy:
                        retry_on: "5xx"
                        num_retries: 3
                        per_try_timeout: 10s
                  - match:
                      prefix: "/ws/"
                    route:
                      cluster: swarm_cluster
                      timeout: 0s
                      upgrade_configs:
                      - upgrade_type: websocket
                        
      clusters:
      - name: swarm_cluster
        connect_timeout: 5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: LEAST_REQUEST
        load_assignment:
          cluster_name: swarm_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: homomorphic-swarm-queen
                    port_value: 8000
        health_checks:
        - timeout: 2s
          interval: 5s
          unhealthy_threshold: 2
          healthy_threshold: 2
          http_health_check:
            path: /health
        circuit_breakers:
          thresholds:
          - max_connections: 100
            max_pending_requests: 100
            max_requests: 100
            max_retries: 3